package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BusinessPartnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessPartnerAllPropertiesEquals(BusinessPartner expected, BusinessPartner actual) {
        assertBusinessPartnerAutoGeneratedPropertiesEquals(expected, actual);
        assertBusinessPartnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessPartnerAllUpdatablePropertiesEquals(BusinessPartner expected, BusinessPartner actual) {
        assertBusinessPartnerUpdatableFieldsEquals(expected, actual);
        assertBusinessPartnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessPartnerAutoGeneratedPropertiesEquals(BusinessPartner expected, BusinessPartner actual) {
        assertThat(expected)
            .as("Verify BusinessPartner auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessPartnerUpdatableFieldsEquals(BusinessPartner expected, BusinessPartner actual) {
        assertThat(expected)
            .as("Verify BusinessPartner relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getRepresentativeName()).as("check representativeName").isEqualTo(actual.getRepresentativeName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getAgentType()).as("check agentType").isEqualTo(actual.getAgentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessPartnerUpdatableRelationshipsEquals(BusinessPartner expected, BusinessPartner actual) {
        assertThat(expected)
            .as("Verify BusinessPartner relationships")
            .satisfies(e -> assertThat(e.getReInsurerContracts()).as("check reInsurerContracts").isEqualTo(actual.getReInsurerContracts()));
    }
}
