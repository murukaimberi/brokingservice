package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static za.co.afrikatek.brokingservice.domain.AssertUtils.bigDecimalCompareTo;

public class ShareAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShareAllPropertiesEquals(Share expected, Share actual) {
        assertShareAutoGeneratedPropertiesEquals(expected, actual);
        assertShareAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShareAllUpdatablePropertiesEquals(Share expected, Share actual) {
        assertShareUpdatableFieldsEquals(expected, actual);
        assertShareUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShareAutoGeneratedPropertiesEquals(Share expected, Share actual) {
        assertThat(expected)
            .as("Verify Share auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShareUpdatableFieldsEquals(Share expected, Share actual) {
        assertThat(expected)
            .as("Verify Share relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getSharePercentage())
                        .as("check sharePercentage")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSharePercentage())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalSumInsured())
                        .as("check totalSumInsured")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalSumInsured())
            )
            .satisfies(
                e ->
                    assertThat(e.getLimitOfLiability())
                        .as("check limitOfLiability")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getLimitOfLiability())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossPremium())
                        .as("check grossPremium")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossPremium())
            )
            .satisfies(
                e ->
                    assertThat(e.getRiCommission())
                        .as("check riCommission")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRiCommission())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetPremium())
                        .as("check netPremium")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNetPremium())
            )
            .satisfies(
                e ->
                    assertThat(e.getBrokerage()).as("check brokerage").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBrokerage())
            )
            .satisfies(
                e ->
                    assertThat(e.getBrokerageAmount())
                        .as("check brokerageAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBrokerageAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetPayable())
                        .as("check netPayable")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNetPayable())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShareUpdatableRelationshipsEquals(Share expected, Share actual) {
        assertThat(expected)
            .as("Verify Share relationships")
            .satisfies(e -> assertThat(e.getReInsurer()).as("check reInsurer").isEqualTo(actual.getReInsurer()));
    }
}
