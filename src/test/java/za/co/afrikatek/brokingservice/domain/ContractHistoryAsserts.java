package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static za.co.afrikatek.brokingservice.domain.AssertUtils.zonedDataTimeSameInstant;

public class ContractHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractHistoryAllPropertiesEquals(ContractHistory expected, ContractHistory actual) {
        assertContractHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertContractHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractHistoryAllUpdatablePropertiesEquals(ContractHistory expected, ContractHistory actual) {
        assertContractHistoryUpdatableFieldsEquals(expected, actual);
        assertContractHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractHistoryAutoGeneratedPropertiesEquals(ContractHistory expected, ContractHistory actual) {
        assertThat(expected)
            .as("Verify ContractHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractHistoryUpdatableFieldsEquals(ContractHistory expected, ContractHistory actual) {
        assertThat(expected)
            .as("Verify ContractHistory relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getContractCreatedDate())
                        .as("check contractCreatedDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getContractCreatedDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getContractActiveDate())
                        .as("check contractActiveDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getContractActiveDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getContractInActiveDate())
                        .as("check contractInActiveDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getContractInActiveDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getContractLastModifiedDate())
                        .as("check contractLastModifiedDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getContractLastModifiedDate())
            )
            .satisfies(e -> assertThat(e.getChangeDescription()).as("check changeDescription").isEqualTo(actual.getChangeDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractHistoryUpdatableRelationshipsEquals(ContractHistory expected, ContractHistory actual) {}
}
