package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static za.co.afrikatek.brokingservice.domain.AssertUtils.bigDecimalCompareTo;
import static za.co.afrikatek.brokingservice.domain.AssertUtils.zonedDataTimeSameInstant;

public class ContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllPropertiesEquals(Contract expected, Contract actual) {
        assertContractAutoGeneratedPropertiesEquals(expected, actual);
        assertContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllUpdatablePropertiesEquals(Contract expected, Contract actual) {
        assertContractUpdatableFieldsEquals(expected, actual);
        assertContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAutoGeneratedPropertiesEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableFieldsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getSubType()).as("check subType").isEqualTo(actual.getSubType()))
            .satisfies(
                e ->
                    assertThat(e.getInception())
                        .as("check inception")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getInception())
            )
            .satisfies(
                e -> assertThat(e.getExpiry()).as("check expiry").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getExpiry())
            )
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(
                e ->
                    assertThat(e.getTotalSumInsured())
                        .as("check totalSumInsured")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalSumInsured())
            )
            .satisfies(
                e ->
                    assertThat(e.getLimitOfLiability())
                        .as("check limitOfLiability")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getLimitOfLiability())
            )
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableRelationshipsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relationships")
            .satisfies(e -> assertThat(e.getInsured()).as("check insured").isEqualTo(actual.getInsured()))
            .satisfies(e -> assertThat(e.getInsurer()).as("check insurer").isEqualTo(actual.getInsurer()))
            .satisfies(e -> assertThat(e.getBroker()).as("check broker").isEqualTo(actual.getBroker()))
            .satisfies(e -> assertThat(e.getReinsurers()).as("check reinsurers").isEqualTo(actual.getReinsurers()))
            .satisfies(e -> assertThat(e.getClassOfBusiness()).as("check classOfBusiness").isEqualTo(actual.getClassOfBusiness()))
            .satisfies(e -> assertThat(e.getSubClassOfBusiness()).as("check subClassOfBusiness").isEqualTo(actual.getSubClassOfBusiness()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()));
    }
}
