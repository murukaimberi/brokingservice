package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubClassOfBusinessAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubClassOfBusinessAllPropertiesEquals(SubClassOfBusiness expected, SubClassOfBusiness actual) {
        assertSubClassOfBusinessAutoGeneratedPropertiesEquals(expected, actual);
        assertSubClassOfBusinessAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubClassOfBusinessAllUpdatablePropertiesEquals(SubClassOfBusiness expected, SubClassOfBusiness actual) {
        assertSubClassOfBusinessUpdatableFieldsEquals(expected, actual);
        assertSubClassOfBusinessUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubClassOfBusinessAutoGeneratedPropertiesEquals(SubClassOfBusiness expected, SubClassOfBusiness actual) {
        assertThat(expected)
            .as("Verify SubClassOfBusiness auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubClassOfBusinessUpdatableFieldsEquals(SubClassOfBusiness expected, SubClassOfBusiness actual) {
        assertThat(expected)
            .as("Verify SubClassOfBusiness relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubClassOfBusinessUpdatableRelationshipsEquals(SubClassOfBusiness expected, SubClassOfBusiness actual) {
        assertThat(expected)
            .as("Verify SubClassOfBusiness relationships")
            .satisfies(e -> assertThat(e.getClassOfBusiness()).as("check classOfBusiness").isEqualTo(actual.getClassOfBusiness()));
    }
}
