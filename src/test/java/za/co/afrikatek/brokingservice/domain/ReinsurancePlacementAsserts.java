package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static za.co.afrikatek.brokingservice.domain.AssertUtils.bigDecimalCompareTo;

public class ReinsurancePlacementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReinsurancePlacementAllPropertiesEquals(ReinsurancePlacement expected, ReinsurancePlacement actual) {
        assertReinsurancePlacementAutoGeneratedPropertiesEquals(expected, actual);
        assertReinsurancePlacementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReinsurancePlacementAllUpdatablePropertiesEquals(ReinsurancePlacement expected, ReinsurancePlacement actual) {
        assertReinsurancePlacementUpdatableFieldsEquals(expected, actual);
        assertReinsurancePlacementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReinsurancePlacementAutoGeneratedPropertiesEquals(ReinsurancePlacement expected, ReinsurancePlacement actual) {
        assertThat(expected)
            .as("Verify ReinsurancePlacement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReinsurancePlacementUpdatableFieldsEquals(ReinsurancePlacement expected, ReinsurancePlacement actual) {
        assertThat(expected)
            .as("Verify ReinsurancePlacement relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getRiPercentageCommission())
                        .as("check riPercentageCommission")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRiPercentageCommission())
            )
            .satisfies(
                e ->
                    assertThat(e.getRiPercentageShare())
                        .as("check riPercentageShare")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRiPercentageShare())
            )
            .satisfies(
                e ->
                    assertThat(e.getRiTotalSumInsured())
                        .as("check riTotalSumInsured")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRiTotalSumInsured())
            )
            .satisfies(
                e ->
                    assertThat(e.getRiLimitOfLiability())
                        .as("check riLimitOfLiability")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRiLimitOfLiability())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossPremiumHundred())
                        .as("check grossPremiumHundred")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossPremiumHundred())
            )
            .satisfies(
                e ->
                    assertThat(e.getRiPremium()).as("check riPremium").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRiPremium())
            )
            .satisfies(
                e ->
                    assertThat(e.getRiCommission())
                        .as("check riCommission")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getRiCommission())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetDueFromInsurer())
                        .as("check netDueFromInsurer")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNetDueFromInsurer())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReinsurancePlacementUpdatableRelationshipsEquals(ReinsurancePlacement expected, ReinsurancePlacement actual) {
        assertThat(expected)
            .as("Verify ReinsurancePlacement relationships")
            .satisfies(e -> assertThat(e.getContract()).as("check contract").isEqualTo(actual.getContract()));
    }
}
