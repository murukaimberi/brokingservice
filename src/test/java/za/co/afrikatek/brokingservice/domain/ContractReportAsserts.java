package za.co.afrikatek.brokingservice.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static za.co.afrikatek.brokingservice.domain.AssertUtils.zonedDataTimeSameInstant;

public class ContractReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractReportAllPropertiesEquals(ContractReport expected, ContractReport actual) {
        assertContractReportAutoGeneratedPropertiesEquals(expected, actual);
        assertContractReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractReportAllUpdatablePropertiesEquals(ContractReport expected, ContractReport actual) {
        assertContractReportUpdatableFieldsEquals(expected, actual);
        assertContractReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractReportAutoGeneratedPropertiesEquals(ContractReport expected, ContractReport actual) {
        assertThat(expected)
            .as("Verify ContractReport auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractReportUpdatableFieldsEquals(ContractReport expected, ContractReport actual) {
        assertThat(expected)
            .as("Verify ContractReport relevant properties")
            .satisfies(e -> assertThat(e.getContractDocument()).as("check contractDocument").isEqualTo(actual.getContractDocument()))
            .satisfies(
                e ->
                    assertThat(e.getContractDocumentContentType())
                        .as("check contractDocument contenty type")
                        .isEqualTo(actual.getContractDocumentContentType())
            )
            .satisfies(
                e ->
                    assertThat(e.getCreatedDate())
                        .as("check createdDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractReportUpdatableRelationshipsEquals(ContractReport expected, ContractReport actual) {}
}
